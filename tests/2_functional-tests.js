/*
*
*
*       FILL IN EACH FUNCTIONAL TEST BELOW COMPLETELY
*       -----[Keep the tests in the same order!]-----
*       
*/


// We'll start by setting out our dependencies:

// We'll be using Chai.js as our assertion framework (with the running of the tests written in Mocha by freeCodeCamp):
const chai = require("chai");
// ... we'll be using the TDD/assertion library for our testing, so let's instantiate that...
const assert = chai.assert;
// ... and also require the HTTP module so that we can carry out our intergration/functional testing:
const chaiHttp = require("chai-http");


// With our dependencies laid out, let's define our server (server.js for us)...
const server = require("../server");
// ... and tell Chai to use the HTTP module:
chai.use(chaiHttp);




// For testing our GET requests on specific books (in order to retrieve their comments) and our POST requests to add a comment to a specific book, we'll need a
// valid _id for a book that's in our database. To achieve this, we'll be saving the _id generated by our POST test. We'll do so here in the global scope to make
// sure that we can access it:
let testId;


suite('Functional Tests', function() {

  /*
  * ----[EXAMPLE TEST]----
  * Each test should completely test the response of the API end-point including response status code!
  */
  test('#example Test GET /api/books', function(done) {
   chai.request(server)
   .get('/api/books')
   .end(function(err, res){
    assert.equal(res.status, 200);
    assert.isArray(res.body, 'response should be an array');
    assert.property(res.body[0], 'commentcount', 'Books in array should contain commentcount');
    assert.property(res.body[0], 'title', 'Books in array should contain title');
    assert.property(res.body[0], '_id', 'Books in array should contain _id');
    done();
  });
 });
  /*
  * ----[END of EXAMPLE TEST]----
  */

  
  
  
  suite('Routing tests', function() {

    // We'll start with testing our POST routes for adding books to the library:
    suite('POST /api/books with title => create book object/expect book object', function() {



      test('Test POST /api/books with title', function(done) {
        chai.request(server)
        .post("/api/books")
        .send( {title: "Testing POST with a title"} )
        .end( function(err, res) {
          assert.equal(res.status, 200);
          assert.property(res.body, "title", "Book should have a \"title\".");
          assert.equal(res.body.title, "Testing POST with a title", "Book \"title\" should match the sent title.");
          assert.property(res.body, "_id", "Book should have an \"_id\".");
          
          // We'll save this valid _id to our testId variable so that we can use it later on in our GET-comments and POST-comment testing:
          testId = res.body._id;
          
          assert.property(res.body, "comments", "Book should have a \"comments\" property.");
          assert.isArray(res.body.comments, "Book \"comments\" should be an array.");
          assert.property(res.body, "inDBbefore", "Book should have property \"inDBbefore\".");
          
          done()
        });  // END of .end(function)
        
      });  // END of "Test POST /api/books with title"
      
      
      
      
      
      test('Test POST /api/books with no title given', function(done) {
        chai.request(server)
        .post("/api/books/")
        .end( function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.body, "no title submitted");
          
          done()
          });  // END of .end(function)
        
      });  // END of "Test POST /api/books with no title given"

      
      
    });  // END of our POST tests for adding books to the library
    
    
    

    
    
    // Let's now test our GET routes for retrieving all the books in the library:
    suite('GET /api/books => array of books', function(){


      test('Test GET /api/books',  function(done) {
        chai.request(server)
        .get("/api/books/")
        .end( function(err, res) {
          assert.equal(res.status, 200);
          assert.isArray(res.body, "The response to a GET request for all books should be an array containing all the books.");
            // We'll check that the array isn't random one by looking at index 0 (our first test should have populated the library with at least one book):
            assert.property(res.body[0], "title", "The entries in the array of books should have a \"title\" property.");
            assert.property(res.body[0], "_id", "The entries in the array of books should have a \"_id\" property.");
            assert.property(res.body[0], "comments", "The entries in the array of books should have a \"comment\" property.");
            assert.isArray(res.body[0].comments, "The \"comments\" property in the array entries should be an array.");
            assert.property(res.body[0], "commentcount", "The entries in the array of books should have a \"commentcount\" property.");
            assert.equal(res.body[0].comments.length, res.body[0].commentcount, "The number of \"comments\" should match the number in \"commentcount\".");
            
            done()
          });  // END of .end(function)
        
      });  // END of "Test GET /api/books"
      
      
    });  // END of testing GET routes for retrieving all the books in the library
    
    
    
    


    // Let's now move on to testing our GET routes for individual books:
    suite('GET /api/books/[id] => book object with [id]', function(){


      test('Test GET /api/books/[id] with id not in db',  function(done) {
        chai.request(server)
        .get("/api/books/123456")
        .end( function(err, res) {
          assert.equal(res.status, 200);
          assert.equal(res.body, "no book exists");
          
          done()
          });  // END of .end(function)
        
      });  // END of "Test GET /api/books/[id] with id not in db"




      
      test('Test GET /api/books/[id] with valid id in db',  function(done) {
        chai.request(server)
        .get("/api/books/" + testId)
        .end( function(err, res) {
          assert.equal(res.status, 200);
          assert.property(res.body, "title", "The book should have a \"title\" property.");
          assert.property(res.body, "_id", "The book should have an \"_id\" property.");
          assert.equal(res.body._id, testId, "The returned \"_id\" should match the testId.");
          assert.property(res.body, "comments", "The book should have a \"comments\" property.");
          assert.isArray(res.body.comments, "The \"comments\" property should contain an array.");

          done()
          });  // END of .end(function)
        
      });  // END of "Test GET /api/books/[id] with valid id in db"


    });  // END of our GET routes for individual books
    
    
    



    // Finally, we'll write our tests for POSTing new comments (always to a specific book based on book Id):
    suite('POST /api/books/[id] => add comment/expect book object with id', function(){

      test('Test POST /api/books/[id] with comment', function(done) {
        chai.request(server)
        .post("/api/books/" + testId)
        .send( {comment: "This is a test comment from Chai."} )
        .end( function(err, res) {
          assert.equal(res.status, 200);
          assert.property(res.body, "title", "The book should have a \"title\" property.");
          assert.property(res.body, "_id", "The book should have an \"_id\" property.");
          assert.equal(res.body._id, testId, "The returned \"_id\" should match the testId.");
          assert.property(res.body, "comments", "The book should have a \"comments\" property.");
          assert.isArray(res.body.comments, "The \"comments\" property should contain an array.");
          
            // We want to check the last entry in the comments array to make sure that it matches the test comment that we sent:
            let lastCommentIndex = res.body.comments.length - 1;
            let lastComment = res.body.comments[lastCommentIndex]            
            assert.equal(lastComment, "This is a test comment from Chai.", "The last comment in the \"comments\" array should match the test comment.");
            
            done()
        });  // END of .end(function)
        
      });  // END of "Test POST /api/books/[id] with comment"

    });  // END of our tests for POSTing new comments to a given book

  });  // END of our "Routing tests" suite

});  // END of our "Functional tests" suite